head	1.11;
access;
symbols;
locks; strict;
comment	@# @;


1.11
date	2021.01.30.00.34.35;	author heiko;	state Exp;
branches;
next	1.10;

1.10
date	2021.01.30.00.26.08;	author heiko;	state Exp;
branches;
next	1.9;

1.9
date	2021.01.26.23.02.22;	author heiko;	state Exp;
branches;
next	1.8;

1.8
date	2021.01.25.20.02.56;	author heiko;	state Exp;
branches;
next	1.7;

1.7
date	2021.01.25.19.52.53;	author heiko;	state Exp;
branches;
next	1.6;

1.6
date	2021.01.24.22.47.46;	author heiko;	state Exp;
branches;
next	1.5;

1.5
date	2021.01.24.22.23.46;	author heiko;	state Exp;
branches;
next	1.4;

1.4
date	2021.01.24.05.20.33;	author heiko;	state Exp;
branches;
next	1.3;

1.3
date	2021.01.23.23.52.19;	author heiko;	state Exp;
branches;
next	1.2;

1.2
date	2021.01.21.23.25.52;	author heiko;	state Exp;
branches;
next	1.1;

1.1
date	2021.01.20.05.08.54;	author heiko;	state Exp;
branches;
next	;


desc
@Markdown version of "Think Java".
@


1.11
log
@R1D10: Added two missing links pointing to the new subchapters.
@
text
@```
// $Id: thinkjava.md,v 1.10 2021/01/30 00:26:08 heiko Exp heiko $
//
// $Log: thinkjava.md,v $
// Revision 1.10  2021/01/30 00:26:08  heiko
// R1D10: Finished subchapter The Hello World Program (1.3).
//
// Revision 1.9  2021/01/26 23:02:22  heiko
// R1D7: Finished What Is a Computer? (1.1), with two images.
//
// Revision 1.8  2021/01/25 20:02:56  heiko
// R1D6: Added two missing links pointing to the new subchapters.
//
// Revision 1.7  2021/01/25 19:52:53  heiko
// R1D6: Added the two remaining subchapters of the Preface.
//
// Revision 1.6  2021/01/24 22:47:46  heiko
// R1D5: Inserted three missing links to the new subchapters.
//
// Revision 1.5  2021/01/24 22:23:46  heiko
// R1D5: Added three new subchapters of the Preface.
//
// Revision 1.4  2021/01/24 05:20:33  heiko
// R1D5: Modified several heading levels of whole file.
//
// Revision 1.3  2021/01/23 23:52:19  heiko
// R1D4: Added The Philosophy Behind the Book, of Preface.
//
// Revision 1.2  2021/01/21 23:25:52  heiko
// R1D2: Added the TOC, and two paragraphs of the Preface.
//
// Revision 1.1  2021/01/20 05:08:54  heiko
// Initial revision
//
```



[\#100DaysOfCode](https://www.100daysofcode.com/) :: ROUND 1 DAY 1--100

**Markdown Version of "Think Java 2e"**

Think Java 2e is available at https://greenteapress.com/wp/think-java-2e/.
Styled HTML generated by [Dillinger](https://dillinger.io).

Challenge started on January 20, 2021.
[@@HeikoBlomenkamp](https://twitter.com/HeikoBlomenkamp) 



# Think Java: How to Think Like a Computer Scientist

**Allen B. Downey and Chris Mayfield**
2nd Edition, Version 7.1.0

Copyright (C) 2020 Allen B. Downey and Chris Mayfield.

Permission is granted to copy, distribute, and/or modify this work under the terms of
the Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International
License, which is available at https://creativecommons.org/licenses/by-nc-sa/4.0/.



- [Preface](#Preface)
    - [The Philosophy Behind the Book](#The_Philosophy_Behind_the_Book)
    - [Object-Oriented Programming](#ObjectOriented_Programming)
    - [Changes to the Second Edition](#Changes_to_the_Second_Edition)
    - [About the Appendixes](#About_the_Appendixes)
    - [Using the Code Examples](#Using_the_Code_Examples)
    - [Acknowledgments](#Acknowledgments) 
- [Computer Programming](#1_Computer_Programming)
    - [What Is a Computer?](#11_What_Is_a_Computer)
    - [What Is Programming?](#12_What_Is_Programming)
    - [The Hello World Program](#13_The_Hello_World_Program)
    - Compiling Java Programs
    - Displaying Two Messages
    - Formatting Source Code
    - Using Escape Sequences
    - What Is Computer Science?
    - Debugging Programs
    - Vocabulary
    - Exercises 
- Variables and Operators
    - Declaring Variables
    - Assigning Variables
    - Memory Diagrams
    - Printing Variables
    - Arithmetic Operators
    - Floating-Point Numbers
    - Rounding Errors
    - Operators for Strings
    - Compiler Error Messages
    - Other Types of Errors
    - Vocabulary
    - Exercises 
- Input and Output
    - The System Class
    - The Scanner Class
    - Language Elements
    - Literals and Constants
    - Formatting Output
    - Reading Error Messages
    - Type Cast Operators
    - Remainder Operator
    - Putting It All Together
    - The Scanner Bug
    - Vocabulary
    - Exercises 
- Methods and Testing
    - Defining New Methods
    - Flow of Execution
    - Parameters and Arguments
    - Multiple Parameters
    - Stack Diagrams
    - Math Methods
    - Composition
    - Return Values
    - Incremental Development
    - Vocabulary
    - Exercises 
- Conditionals and Logic
    - Relational Operators
    - The if-else Statement
    - Chaining and Nesting
    - The switch Statement
    - Logical Operators
    - De Morgan's Laws
    - Boolean Variables
    - Boolean Methods
    - Validating Input
    - Example Program
    - Vocabulary
    - Exercises 
- Loops and Strings
    - The while Statement
    - Increment and Decrement
    - The for Statement
    - Nested Loops
    - Characters
    - Which Loop to Use
    - String Iteration
    - The indexOf Method
    - Substrings
    - String Comparison
    - String Formatting
    - Vocabulary
    - Exercises 
- Arrays and References
    - Creating Arrays
    - Accessing Elements
    - Displaying Arrays
    - Copying Arrays
    - Traversing Arrays
    - Random Numbers
    - Building a Histogram
    - The Enhanced for Loop
    - Counting Characters
    - Vocabulary
    - Exercises 
- Recursive Methods
    - Recursive Void Methods
    - Recursive Stack Diagrams
    - Value-Returning Methods
    - The Leap of Faith
    - Counting Up Recursively
    - Binary Number System
    - Recursive Binary Method
    - CodingBat Problems
    - Vocabulary
    - Exercises 
- Immutable Objects
    - Primitives vs Objects
    - The null Keyword
    - Strings Are Immutable
    - Wrapper Classes
    - Command-Line Arguments
    - Argument Validation
    - BigInteger Arithmetic
    - Incremental Design
    - More Generalization
    - Vocabulary
    - Exercises 
- Mutable Objects
    - Point Objects
    - Objects as Parameters
    - Objects as Return Values
    - Rectangles Are Mutable
    - Aliasing Revisited
    - Java Library Source
    - Class Diagrams
    - Scope Revisited
    - Garbage Collection
    - Mutable vs Immutable
    - StringBuilder Objects
    - Vocabulary
    - Exercises 
- Designing Classes
    - The Time Class
    - Constructors
    - Value Constructors
    - Getters and Setters
    - Displaying Objects
    - The toString Method
    - The equals Method
    - Adding Times
    - Vocabulary
    - Exercises 
- Arrays of Objects
    - Card Objects
    - Card toString
    - Class Variables
    - The compareTo Method
    - Cards Are Immutable
    - Arrays of Cards
    - Sequential Search
    - Binary Search
    - Tracing the Code
    - Vocabulary
    - Exercises 
- Objects of Arrays
    - Decks of Cards
    - Shuffling Decks
    - Selection Sort
    - Merge Sort
    - Subdecks
    - Merging Decks
    - Adding Recursion
    - Static Context
    - Piles of Cards
    - Playing War
    - Vocabulary
    - Exercises 
- Extending Classes
    - CardCollection
    - Inheritance
    - Dealing Cards
    - The Player Class
    - The Eights Class
    - Class Relationships
    - Vocabulary
    - Exercises 
- Arrays of Arrays
    - Conway's Game of Life
    - The Cell Class
    - Two-Dimensional Arrays
    - The GridCanvas Class
    - Other Grid Methods
    - Starting the Game
    - The Simulation Loop
    - Exception Handling
    - Counting Neighbors
    - Updating the Grid
    - Vocabulary
    - Exercises 
- Reusing Classes
    - Langton's Ant
    - Refactoring
    - Abstract Classes
    - UML Diagram
    - Vocabulary
    - Exercises 
- Advanced Topics
    - Polygon Objects
    - Adding Color
    - Regular Polygons
    - More Constructors
    - An Initial Drawing
    - Blinking Polygons
    - Interfaces
    - Event Listeners
    - Timers
    - Vocabulary
    - Exercises 
- Tools
    - Installing DrJava
    - DrJava Interactions
    - Command-Line Interface
    - Command-Line Testing
    - Running Checkstyle
    - Tracing with a Debugger
    - Testing with JUnit
    - Vocabulary 
- Javadoc
    - Reading Documentation
    - Writing Documentation
    - Javadoc Tags
    - Example Source File
    - Vocabulary 
- Graphics
    - Creating Graphics
    - Graphics Methods
    - Example Drawing
    - Vocabulary
    - Exercises 
- Debugging
    - Compile-Time Errors
    - Run-Time Errors
    - Logic Errors
- Index



## Preface

*Think Java* is an introduction to computer science and programming intended for
readers with little or no experience. We start with the most basic concepts and are
careful to define all terms when they are first used. The book presents each new idea
in a logical progression. Larger topics, like control flow statements and object-
oriented programming, are divided into smaller examples and introduced over the
course of several chapters.

This book is intentionally concise. Each chapter is 12--14 pages and covers the
material for one week of a college course. It is not meant to be a comprehensive
presentation of Java, but rather, an initial exposure to programming constructs and
techniques. We begin with small problems and basic algorithms and work up to
object-oriented design. In the vocabulary of computer science pedagogy, this book uses
the "objects late" approach.



### The Philosophy Behind the Book

Here are the guiding principles that make the book the way it is:

One concept at a time:
: We break down topics that give beginners trouble into a series of small steps,
so that they can exercise each new concept in isolation before continuing.

Balance of Java and concepts:
: The book is not primarily about Java; it uses code examples to demonstrate
computer science. Most chapters start with language features and end with
concepts.

Conciseness:
: An important goal of the book is to be small enough so that students can read
and understand the entire text in a one-semester college or AP course. 

Emphasis on vocabulary:
: We try to introduce the minimum number of terms and define them carefully
when they are first used. We also organize them in glossaries at the end of
each chapter.

Program development:
: There are many strategies for writing programs, including bottom-up, top-down,
and others. We demonstrate multiple program development techniques,
allowing readers to choose methods that work best for them.

Multiple learning curves:
: To write a program, you have to understand the algorithm, know the
programming language, and be able to debug errors. We discuss these and
other aspects throughout the book and summarize our advice in Appendix [D](#).



### Object-Oriented Programming

Some Java books introduce classes and objects immediately; others begin with
procedural programming and transition to object-oriented more gradually.

Many of Java's object-oriented features are motivated by problems with previous
languages, and their implementations are influenced by this history. Some of these
features are hard to explain when people aren't familiar with the problems they solve.

We get to object-oriented programming as quickly as possible (beginning with
Chapter [9](#)). But we introduce concepts one at a time, as clearly as possible, in a way
that allows readers to practice each idea in isolation before moving on. So it takes
some time to get there.

You can't write Java programs (even Hello World) without encountering object-
oriented features. In some cases we explain a feature briefly when it first appears,
and then explain it more deeply later on.

If you read the entire book, you will see nearly every topic required for Java SE
Programmer I certification. Supplemental lessons are available in the official Java
tutorials on Oracle's website (https://thinkjava.org/tutorial).

This book is also well suited to prepare high school students for the AP Computer
Science A exam, which includes object-oriented design and implementation. (AP is a
registered trademark of The College Board.) A mapping of *Think Java* section
numbers to the AP course is available on our website: https://thinkjava.org/.



### Changes to the Second Edition

This new edition was written over several years, with feedback from dozens of
instructors and hundreds of students. A complete history of all changes is available
on GitHub. Here are some of the highlights:

Chapters 1--4:
: We reordered the material in Chapter 1 to present a more interesting balance of
theory and practice. Chapters 2--3 are much cleaner now too. Methods are now
presented in a single chapter, along with additional in-depth examples.

Chapters 5--8:
: We rearranged these chapters a lot, added many examples and new figures,
and removed unnecessary details. Strings are covered earlier (before arrays) so
that readers can apply them to loop problems. The material on recursion is now
a chapter, and we added new sections to explain binary numbers and
*CodingBat*.

Chapters 9--12:
: Our main goal for these chapters was to provide better explanations and more
diagrams. Chapters 9--10 focus more on immutable versus mutable objects,
and we added new sections on BigInteger and StringBuilder. The other content
is largely the same, but it should be easier to understand now.

Chapters 13--17:
: We balanced the amount of content in Chapters 13--14 by moving ArrayLists
earlier, and we implement the "War" card game as another example.
Chapters 15--17 are brand new in this edition; they cover more advanced topics
including 2D arrays, graphics, exceptions, abstract classes, interfaces, and
events.

Appendixes:
: We added Appendix [B](#) to explain documentation comments and Javadoc in
more detail. The other three appendixes that were present in the first edition
have been revised for clarity and layout.



### About the Appendixes

The chapters of this book are meant to be read in order, because each one builds on
the previous one. We also include several appendixes with material that can be read
at any time:

Appendix A, "Tools"
: This appendix explains how to download and install Java so you can compile
programs on your computer. It also provides a brief introduction to DrJava---an
integrated development environment designed primarily for students---and
other development tools, including Checkstyle for code quality and JUnit for
testing.

Appendix B, "Javadoc"
: It's important to document your classes and methods so that other
programmers (including yourself in the future) will know how to use them. This
appendix explains how to read documentation, how to write documentation,
and how to use the Javadoc tool.

Appendix C, "Graphics"
: Java provides libraries for working with graphics and animation, and these
topics can be engaging for students. The libraries require object-oriented
features that students will not completely understand until after Chapter [10](#), but
they can be used much earlier.

Appendix D, "Debugging"
: We provide debugging suggestions throughout the book, but this appendix
provides many more suggestions on how to debug your programs. We
recommend that you review this appendix frequently as you work through the
book.



### Using the Code Examples

Most of the code examples in this book are available from a Git repository at
https://github.com/ChrisMayfield/ThinkJavaCode2. Git is a "version control system"
that allows you to keep track of the files that make up a project. A collection of
files under Git's control is called a "repository".

GitHub is a hosting service that provides storage for Git repositories and a
convenient web interface. It provides several ways to work with the code:

- You can create a copy of the repository on GitHub by clicking the Fork button.
If you don't already have a GitHub account, you'll need to create one. After
forking, you'll have your own repository on GitHub that you can use to keep
track of code you write. Then you can "clone" the repository, which downloads
a copy of the files to your computer.

- Alternatively, you could clone the original repository without forking. If you
choose this option, you don't need a GitHub account, but you won't be able to
save your changes on GitHub.

- If you don't want to use Git at all, you can download the code in a ZIP archive
using the Clone button on the GitHub page, or this link:
https://thinkjava.org/code2zip.

After you clone the repository or unzip the ZIP file, you should have a directory
named *ThinkJavaCode2* with a subdirectory for each chapter in the book.

The examples in this book were developed and tested using OpenJDK 11. If you are
using a more recent version, everything should still work. If you are using an older
version, some of the examples might not.



### Acknowledgments

Many people have sent corrections and suggestions over the years, and we
appreciate their valuable feedback! This list begins with Version 4.0 of the open
source edition, so it omits those who contributed to earlier versions:

- Ellen Hildreth used this book to teach Data Structures at Wellesley College and
submitted a whole stack of corrections and suggestions.

- Tania Passfield pointed out that some glossaries had leftover terms that no
longer appeared in the text.

- Elizabeth Wiethoff noticed that the series expansion of exp(-x&#x00b2;) was wrong.
She has also worked on a Ruby version of the book.

- Matt Crawford sent in a whole patch file full of corrections.

- Chi-Yu Li pointed out a typo and an error in one of the code examples.
- Doan Thanh Nam corrected an example.

- Muhammad Saied translated the book into Arabic and found several errors in
the process.

- Marius Margowski found an inconsistency in a code example.

- Leslie Klein discovered another error in the series expansion of exp(-x&#x00b2;),
identified typos in card array figures, and helped clarify several exercises.

- Micah Lindstrom reported half a dozen typos and sent corrections.

- James Riely ported the textbook source from LaTeX to Sphinx.
http://fpl.cs.depaul.edu/jriely/thinkapjava/

- Peter Knaggs ported the book to C#.
https://www.rigwit.co.uk/think/sharp/

- Heidi Gentry-Kolen recorded several video lectures that follow the book.
https://www.youtube.com/user/digipipeline

- Waldo Ribeiro submitted a pull request that corrected a dozen typos.

- Michael Stewart made several suggestions for improving the first half of the
book.

- Steven Richardson adapted the book for an online course and contributed
many ideas for improving the text.

- Fazl Rahman provided detailed feedback, chapter by chapter, and offered many
suggestions for improving the text. 

We are especially grateful to the technical reviewers of the O'Reilly Media first
edition: Blythe Samuels, David Wisneski, and Stephen Rose. They found errors, made
many great suggestions, and helped make the book much better.

Likewise, we thank Marc Loy for his thorough review of the O'Reilly Media second
edition. He contributed many corrections, insights, and clarifications.

Many students have given exceptional feedback, including Ian Staton, Tanner
Wernecke, Jacob Green, Rasha Abuhantash, Nick Duncan, Kylie Davidson, Shirley
Jiang, Elena Trafton, Jennifer Gregorio, and Azeem Mufti.

Other contributors who found one or more typos: Stijn Debrouwere, Guy Driesen,
Andai Velican, Chris Kuszmaul, Daniel Kurikesu, Josh Donath, Rens Findhammer,
Elisa Abedrapo, Yousef BaAfif, Bruce Hill, Matt Underwood, Isaac Sultan, Dan Rice,
Robert Beard, Daniel Pierce, Michael Giftthaler, Chris Fox, Min Zeng, Markus Geuss,
Mauricio Gonzalez, Enrico Sartirana, Kasem Satitwiwat, Jason Miller, Kevin Molloy,
Cory Culbertson, Will Crawford, and Shawn Brenneman.

If you have additional comments or ideas about the text, please send them to:
feedback@@greenteapress.com.

Allen Downey and Chris Mayfield



## 1\. Computer Programming

The goal of this book is to teach you to think like a computer scientist. This way of
thinking combines some of the best features of mathematics, engineering, and
natural science. Like mathematicians, computer scientists use formal languages to
denote ideas---specifically, computations. Like engineers, they design things,
assembling components into systems and evaluating trade-offs among alternatives.
And like scientists, they observe the behavior of complex systems, form hypotheses,
and test predictions.

An important skill for a computer scientist is **problem solving**. It involves the ability
to formulate problems, think creatively about solutions, and express solutions clearly
and accurately. As it turns out, the process of learning to program computers is
an excellent opportunity to develop problem-solving skills. On one level, you will be
learning to write Java programs, a useful skill by itself. But on another level, you will
use programming as a means to an end. As we go along, that end will become
clearer.



### 1\.1 What Is a Computer?

When people hear the word *computer*, they often think of a desktop or a laptop. Not
surprisingly, searching for "computer" on Google Images
(https://images.google.com/) displays rows and rows of these types of machines.
However, in a more general sense, a computer can be any type of device that stores
and processes data.

Dictionary.com defines a computer as "a programmable electronic device designed
to accept data, perform prescribed mathematical and logical operations at high
speed, and display the results of these operations. Mainframes, desktop and laptop
computers, tablets, and smartphones are some of the different types of computers."

Each type of computer has its own unique design, but internally they all share the
same type of **hardware**. The two most important hardware components are
**processors** (or CPUs) that perform simple calculations and **memory** (or RAM) that
temporarily stores information. Figure 1.1 shows what these components look like.

Figure 1.1: Example processor and memory hardware.
: ![Example processor hardware.](https://greenteapress.com/thinkjava7/html/thinkjava2_001.png "Processor (CPU)") ![Example memory hardware.](https://greenteapress.com/thinkjava7/html/thinkjava2_002.png "Memory (RAM)")

Users generally see and interact with touchscreens, keyboards, and monitors, but it's
the processors and memory that perform the actual computation. Nowadays it's
fairly standard, even for a smartphone, to have at least eight processors and four
gigabytes (four billion cells) of memory.



### 1\.2 What Is Programming?

A **program** is a sequence of instructions that specifies how to perform a
computation on computer hardware. The computation might be something
mathematical, like solving a system of equations or finding the roots of a
polynomial. It could also be a symbolic computation, like searching and replacing
text in a document or (strangely enough) compiling a program.

The details look different in different languages, but a few basic instructions appear
in just about every language:

input:
: Get data from the keyboard, a file, a sensor, or some other device. 

output:
: Display data on the screen, or send data to a file or other device. 

math:
: Perform basic mathematical operations like addition and division. 

decision:
: Check for certain conditions and execute the appropriate code. 

repetition:
: Perform an action repeatedly, usually with some variation. 

Believe it or not, that's pretty much all there is to it. Every program you've ever used,
no matter how complicated, is made up of small instructions that look much like
these. So you can think of **programming** as the process of breaking down a large,
complex task into smaller and smaller subtasks. The process continues until the
subtasks are simple enough to be performed with the electronic circuits provided by
the hardware.



### 1\.3 The Hello World Program

Traditionally, the first program you write when learning a new programming language
is called the "Hello World" program. All it does is output the words **Hello, World!** to
the screen. In Java, it looks like this:

```java
public class Hello {

    public static void main(String[] args) {
        // generate some simple output
        System.out.println("Hello, World!");
    }
}
```

When this program runs, it displays the following:

```
Hello, World!
```

Notice that the output does not include the quotation marks.

Java programs are made up of *class* and *method* definitions, and methods are made
up of *statements*. A **statement** is a line of code that performs a basic action. In the
Hello World program, this line is a **print statement** that displays a message to the
user:

```java
System.out.println("Hello, World!");
```

**System.out.println** displays results on the screen; the name **println** stands for "print
line". Confusingly, *print* can mean both "display on the screen" and "send to the
printer". In this book, we'll try to say "display" when we mean output to the screen.
Like most statements, the print statement ends with a semicolon (**;**).

Java is "case-sensitive", which means that uppercase and lowercase are not the
same. In the Hello World program, **System** has to begin with an uppercase letter;
**system** and **SYSTEM** won't work.

A **method** is a named sequence of statements. This program defines one method
named **main**:

```java
public static void main(String[] args)
```

The name and format of **main** is special: when the program runs, it starts at the first
statement in **main** and ends when it finishes the last statement. Later, you will see
programs that define more than one method.

This program defines a class named **Hello**. For now, a **class** is a collection of
methods; we'll have more to say about this later. You can give a class any name you
like, but it is conventional to start with a capital letter. The name of the class has to
match the name of the file it is in, so this class has to be in a file named *Hello.java*.

Java uses curly braces (**{** and **}**) to group things together. In *Hello.java*, the outermost
braces contain the class definition, and the inner braces contain the method
definition.

The line that begins with two slashes (**//**) is a **comment**, which is a bit of English text
that explains the code. When Java sees **//**, it ignores everything from there until the
end of the line. Comments have no effect on the execution of the program, but they
make it easier for other programmers (and your future self) to understand what you
meant to do.
@


1.10
log
@R1D10: Finished subchapter The Hello World Program (1.3).
@
text
@d2 1
a2 1
// $Id: thinkjava.md,v 1.9 2021/01/26 23:02:22 heiko Exp heiko $
d5 3
d73 2
a74 2
    - What Is Programming?
    - The Hello World Program
@


1.9
log
@R1D7: Finished What Is a Computer? (1.1), with two images.
@
text
@d2 1
a2 1
// $Id: thinkjava.md,v 1.8 2021/01/25 20:02:56 heiko Exp heiko $
d5 3
d605 105
@


1.8
log
@R1D6: Added two missing links pointing to the new subchapters.
@
text
@d2 1
a2 1
// $Id: thinkjava.md,v 1.7 2021/01/25 19:52:53 heiko Exp heiko $
d5 3
d65 2
a66 2
- Computer Programming
    - What Is a Computer?
d553 49
a601 1
Allen Downey and Chris Mayfield 
@


1.7
log
@R1D6: Added the two remaining subchapters of the Preface.
@
text
@d2 1
a2 1
// $Id: thinkjava.md,v 1.6 2021/01/24 22:47:46 heiko Exp heiko $
d5 3
d60 2
a61 2
    - Using the Code Examples
    - Acknowledgments 
@


1.6
log
@R1D5: Inserted three missing links to the new subchapters.
@
text
@d2 1
a2 1
// $Id: thinkjava.md,v 1.5 2021/01/24 22:23:46 heiko Exp heiko $
d5 3
d27 1
a27 1
[\#100DaysOfCode](https://www.100daysofcode.com/) :: ROUND 1 DAY 1-100
d440 108
@


1.5
log
@R1D5: Added three new subchapters of the Preface.
@
text
@d2 1
a2 1
// $Id: thinkjava.md,v 1.4 2021/01/24 05:20:33 heiko Exp heiko $
d5 3
d51 3
a53 3
    - Object-Oriented Programming
    - Changes to the Second Edition
    - About the Appendixes
@


1.4
log
@R1D5: Modified several heading levels of whole file.
@
text
@d2 1
a2 1
// $Id: thinkjava.md,v 1.3 2021/01/23 23:52:19 heiko Exp heiko $
d5 3
d294 1
a294 1
This book is intentionally concise. Each chapter is 12-14 pages and covers the
d334 100
@


1.3
log
@R1D4: Added The Philosophy Behind the Book, of Preface.
@
text
@d2 1
a2 1
// $Id: thinkjava.md,v 1.2 2021/01/21 23:25:52 heiko Exp heiko $
d5 3
d18 1
a18 1
# \#100DaysOfCode
d20 1
a20 1
##  R1D1: Markdown Version of "Think Java 2e"
d30 1
a30 1
### Think Java: How to Think Like a Computer Scientist
a42 2
##  R1D2: Markdown Version of "Think Java 2e"

d282 1
a282 1
#### Preface
d300 1
a300 9
##  R1D3: Markdown Version of "Think Java 2e"

- hb: Anki flashcards for markdown studies are available at [GitHub](https://github.com/HeikoBlomenkamp/100-days-of-code).



##  R1D4: Markdown Version of "Think Java 2e"

##### The Philosophy Behind the Book
@


1.2
log
@R1D2: Added the TOC, and two paragraphs of the Preface.
@
text
@d2 1
a2 1
// $Id: thinkjava.md,v 1.1 2021/01/20 05:08:54 heiko Exp heiko $
d5 3
d42 2
a43 2
- [Preface](#Preface_277)
    - The Philosophy Behind the Book
d296 42
@


1.1
log
@Initial revision
@
text
@d2 5
a6 1
// $Id$
a7 1
// $Log$
d35 258
@
